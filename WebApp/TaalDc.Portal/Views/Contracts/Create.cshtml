@using SeedWork;
@using TaalDc.Portal.DTO.Catalog.Floors;
@model int
@inject IAmCurrentUser CurrentUser

@{
    ViewBag.Title = "New Contract";

    var activeFloors = ViewBag.ActiveFloors as IEnumerable<ActiveFloor_ClientDto>;
}


<div class="container-fluid">
    <div class="tab-content">
        <h4 class="primary-color mb-3">
            <strong>
                New Contract
            </strong>
        </h4>

        <hr />

         <div class="formLoader">
            <ul class="formLoading">
                <li></li>
                <li></li>
                <li></li>
            </ul>
        </div>

        <form id="contractForm" class="row mb-5 needs-validation" method="post" asp-action="Create" asp-controller="Contracts">
            <input name="BuyerId" value="@Model" hidden />

            <div class="mb-5 col-lg-12">
                <label for="TransactionDate" class="form-label">
                    <strong>Transaction Date</strong>
                </label>
                <input name="TransactionDate" class="form-control" required type="date" />
                <div class="invalid-feedback">
                    This is a required field.
                </div>
            </div>

            <div class="col-lg-12">
               <h3><strong>Units</strong></h3>
            </div>
            <a class="mb-3" onclick="openAvailableUnits_Modal()" href="#">Add</a>
            <hr />

            <ul id="selected-units-list">
            </ul>

            <div class="mb-3 col-lg-12">
                @if (CurrentUser.IsBroker())
                {
                    <label for="Broker" class="form-label">
                        <strong>Broker <small>(Defaults to current user)</small></strong>
                    </label>
                    <input name="Broker" class="form-control" required value="@CurrentUser.Email" readonly="readonly"/>
                    <div class="invalid-feedback">
                        This is a required field.
                    </div>
                }
                else
                {
                    <label for="Broker" class="form-label">
                        <strong>Broker's Email Address</strong>
                    </label>
                    <input name="Broker" class="form-control" required value="" type="email"/>
                    <div class="invalid-feedback">
                        This is a required field.
                    </div>
                }
            </div>

            <div class="mb-3 col-lg-6">
                <label for="ReservationFee" class="form-label">
                    <strong>Reservation Fee</strong>
                </label>
                <input id="ReservationFee" name="ReservationFee" class="form-control" required />
                <div class="invalid-feedback">
                    This is a required field.
                </div>
            </div>

            <div class="mb-3 col-lg-6">
                <label for="ReservationConfirmation" class="form-label">
                    <strong>Reservation Confirmation No</strong>
                </label>
                <input name="ReservationConfirmation" class="form-control" required />
                <div class="invalid-feedback">
                    This is a required field.
                </div>
            </div>

            <div class="mb-3 col-lg-6">
                <label for="DownPayment" class="form-label">
                    <strong>Downpayment</strong>
                </label>
                <input id="DownPayment" name="DownPayment" class="form-control" required />
                <div class="invalid-feedback">
                    This is a required field.
                </div>
            </div>

            <div class="mb-3 col-lg-6">
                <label for="DownpaymentConfirmation" class="form-label">
                    <strong>Downpayment Confirmation No</strong>
                </label>
                <input name="DownpaymentConfirmation" class="form-control" required />
                <div class="invalid-feedback">
                    This is a required field.
                </div>
            </div>

            <div class="mb-3 col-lg-12">
                <label for="PaymentMethod" class="form-label">
                    <strong>Payment Method</strong>
                </label>
                <select name="PaymentMethod" class="form-control form-select" required>
                    <option value="Cash">
                        Cash
                    </option>
                    <option value="Check">
                        Check
                    </option>
                </select>
                <div class="invalid-feedback">
                    This is a required field.
                </div>
            </div>

            <div class="mb-3 col-lg-12">
                <label for="Remarks" class="form-label">
                    <strong>Note/Remarks</strong>
                </label>
                <textarea name="Remarks" class="form-control" rows="5" value=""></textarea>
                <div class="invalid-feedback">
                    This is a required field.
                </div>
            </div>

            <div class="col-lg-12">
                <input class="btn btn-primary" type="submit" value="Save" />
            </div>
        </form>

    </div>
</div>


<div class="modal fade" id="available-units-modal" tabindex="-1" aria-labelledby="available-units-modal" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5>Available Units</h5>
                <button type="button" class="btn-close text-white" data-bs-dismiss="modal" aria-label="Close">
                    <i class="fa-solid fa-xmark"></i>
                </button>
            </div>
            <div class="modal-body">
                <form id="units-multiple-form" class="row mb-3">
                    <div class="col-lg-4 mb-3">
                        <label class="form-label" for="unitFilter">Unit No.</label>
                        <input name="unitFilter" placeholder="Search..." class="form-control"/>
                    </div>
                    <div class="col-lg-4 mb-3">
                        <label class="form-label" for="unitTypeId">Unit Type</label>
                        <select onchange="getAvailableUnits_Multiple(1,10)" class="form-control form-select" name="unitTypeId">
                            <option value="" selected>Not Applicable</option>
                            <option value="2">One Bedroom</option>
                            <option value="3">Two Bedroom</option>
                            <option value="4">Three Bedroom</option>
                            <option value="5">Penthouse</option>
                            <option value="6">Residential Parking</option>
                            <option value="7">Motorcycle Parking</option>
                            <option value="8">Commercial Space</option>
                        </select>
                    </div>
                    <div class="col-lg-4 mb-3">
                        <label class="form-label" for="floorId">Floor</label>
                        <select onchange="getAvailableUnits_Multiple(1,10)" class="form-control form-select" name="floorId">
                            <option value="">All Floors</option>
                            @foreach(var floor in activeFloors)
                            {
                                <option value="@floor.Id">@floor.FloorName</option>    
                            }
                        </select>
                    </div>
                </form>
                <div class="formLoader">
                    <ul class="formLoading">
                        <li></li>
                        <li></li>
                        <li></li>
                    </ul>
                </div>
                <table class="table">
                    <thead>
                    <tr>
                        <th></th>
                        <th></th>
                    </tr>
                    </thead>
                    <tbody id="unit-body">

                    </tbody>
                </table>
                <div id="unit-pagination"></div>
            </div>
        </div>
    </div>
</div>



<div class="modal fade" id="order-item-modal" tabindex="-1" aria-labelledby="order-item-modal" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5>Edit Item</h5>
                <button type="button" class="btn-close text-white" data-bs-dismiss="modal" aria-label="Close">
                    <i class="fa-solid fa-xmark"></i>
                </button>
            </div>
            <div class="modal-body">
               <form id="orderItemForm">
                    <input name="UnitId" id="UnitId" hidden /> 
                    <div class="mb-3 col-lg-12">
                        <label class="form-label" for="Unit">
                            <strong>Unit</strong>
                        </label>
                        <input class="form-control" id="Unit" name="Unit" readonly value="4-413"/>
                    </div>
                    <div class="mb-3 col-lg-12">
                        <label class="form-label" for="Price"><strong>Price</strong></label>
                        <input class="form-control" id="Price" name="Price" required />
                    </div>
                    <div class="col-lg-12">
                        <input class="btn btn-primary" type="submit" value="Save" />
                    </div>
               </form>
            </div>
        </div>
    </div>
</div>

@section Scripts{
    <script>
        let selectedUnits = [];

       

        function onRemoveSelected(id){
            let isSelected = selectedUnits.some(unit => unit.id === id);
             if (isSelected) {
                selectedUnits = selectedUnits.filter(unit => unit.id !== id);
            }

            renderSelectedUnitsList();

        }
        
        function onUnitCheckSelect(id, name, price){

            let isSelected = selectedUnits.some(unit => unit.id === id);

            console.log('is selected', isSelected);

            if (isSelected) {
                selectedUnits = selectedUnits.filter(unit => unit.id !== id);
            }else{
                selectedUnits.push({
                    id
                    , name
                    , price
                })
            }

            
            console.log('selected', selectedUnits)


            renderSelectedUnitsList();

        }

        function renderSelectedUnitsList() {
             const selectedUnitList = selectedUnits.map(unit => {
                unitPrice = unit.price.toLocaleString('en-US', { style: 'currency', currency: 'PHP', minimumFractionDigits: 2 });

                return `<li class="order-item" onclick="openEditOrderItem('${unit.id}')">
                <a style="color: red;" href="#" onClick="onRemoveSelected('${unit.id}')">
                <i class="fa-sharp fa-solid fa-minus"></i></a> ${unit.name}
                <br/>
                <small>${unitPrice}</small>
                </li>`;
            });

            const selectedUnitsListElement = document.getElementById('selected-units-list');
            selectedUnitsListElement.innerHTML = selectedUnitList.join('');

            console.log(selectedUnitList); // array of <li> elements
        }



        function openEditOrderItem(unitId) {
            const unitsModal = new bootstrap.Modal(document.getElementById('order-item-modal'), {});

            let selectedUnit = selectedUnits.find(unit => unit.id === unitId);

            console.log('selected', selectedUnit);

            var unitInput = document.getElementById("Unit");
            unitInput.value = selectedUnit.name;

            var priceInput = document.getElementById("Price");
            priceInput.value = selectedUnit.price.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });

            var unitIdInput = document.getElementById("UnitId");

            unitIdInput.value = unitId;

            $("#Price").mask("#,##0.00", { reverse: true });

            unitsModal.show();
        }

        const orderItemForm = document.getElementById('orderItemForm');

        orderItemForm.addEventListener('submit', saveOrderItem);

        function saveOrderItem(event){
            event.preventDefault();
            const form = event.target;
            const data = new FormData(form);
            const value = Object.fromEntries(data.entries());

            console.log('form data', value);

            let index = selectedUnits.findIndex(el => el.id === value.UnitId);

            if (index !== -1) {
              // Modify the "name" property of the element
                selectedUnits[index].price = parseFloat(value.Price.split(",").join(""));
            }

             renderSelectedUnitsList();
        }

    </script>

    <script src="~/js/sales/sales.js"></script>
}
