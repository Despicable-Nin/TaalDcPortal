@using TaalDc.Portal.DTO.Marketing;
@model InquiryDto

@{
    ViewBag.Title = "Inquiry Details";
    Layout = "_Layout";


    var salutationArray = Model.Salutation.Split(":");
    var withOtherSalutation = salutationArray[0] == "Other";

    var salutation = withOtherSalutation ? salutationArray[1] : salutationArray[0];
}

<div class="container-fluid">
    <ul class="nav nav-tabs">
        <li class="nav-item">
            <a class="nav-link active" aria-current="page" asp-controller="Inquiries" asp-action="Details" asp-route-id="@Model.Id">Details</a>
        </li>
    </ul>
    
    <div class="tab-content">
        <h4 class="primary-color mb-5 mt-3">
            <strong>Inquiry Details</strong>
        </h4>


        <div class="row">
            <div class="col-lg-4">
                <p class="mb-5">
                    <strong class="primary-color">Inquiry Date</strong> <br />
                    @Model.DateOfInquiry.ToLocalTime().ToString("MMMM dd, yyyy hh:mm tt")
                </p>
                <p class="mb-5">
                    <strong class="primary-color">Full Name</strong> <br/>
                     @salutation @Model.FirstName @Model.LastName
                </p>
                <p class="mb-5">
                    <strong class="primary-color">Inquiry Type</strong> <br/>
                    @Model.InquiryType
                </p>
                <p class="mb-5">
                    <strong class="primary-color">Email Address</strong> <br/>
                    @Model.EmailAddress
                </p>
                <p class="mb-5">
                    <strong class="primary-color">Contact No.</strong> <br/>
                    @Model.ContactNo
                </p>
                <p class="mb-5">
                    <strong class="primary-color">Address</strong> <br/>
                    @Model.TownCity, @Model.Province, @Model.Country
                </p>
                <p class="mb-5">
                    <strong class="primary-color">Property Inquired</strong> <br/>
                    @Model.Property
                </p>
                <p class="mb-5">
                    <strong class="primary-color">Message</strong> <br/>
                    @Model.Message
                </p>
            </div>
            <div class="col-lg-4">
                <p class="mb-5">
                    <strong class="primary-color">Status</strong> <br/>
                    @Model.Status  <a onclick="openUpdateInqStatus()" href="#">Update</a>
                </p>
            </div>
        </div>
    </div>
</div>


<div class="modal fade" id="update-status">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5">Update Inquiry Status</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                 <div class="formLoader">
                    <ul class="formLoading">
                        <li></li>
                        <li></li>
                        <li></li>
                    </ul>
                </div>
                <form class="row needs-validation" id="inquiryStatusForm" method="post" asp-action="UpdateInquiryStatus" asp-controller="Inquiries" data-redirectTo="@Url.Action("Index","Inquiries")">
                    <input name="Id" value="@Model.Id" hidden />
                    <div class="mb-3 col-lg-12">
                        <label for="Status" class="form-label">
                            <strong>Status</strong>
                        </label>
                        <select name="Status" class="form-control form-select" required>
                           @* <option value="2">
                                Open
                            </option>*@
                            <option value="3">
                                Closed
                            </option>
                        </select>
                        <div class="invalid-feedback">
                            This is a required field.
                        </div>
                    </div>

                    <div class="col-lg-12">
                        <input class="btn btn-primary w-100" type="submit" value="Save" />
                    </div>
                </form>
            </div>
        </div>


    </div>
</div>

@section Scripts{
    <script>
        function openUpdateInqStatus() {
            var reportModal = document.getElementById('update-status');

            var modal = new bootstrap.Modal(reportModal, {});

            modal.show();
        }


        const inquiryStatusForm = document.getElementById('inquiryStatusForm');

        inquiryStatusForm.addEventListener('submit', saveInfo);


        function saveInfo(event) {
            $('.formLoader').show();
            event.preventDefault();
            const form = event.target;
            const data = new FormData(form);
            const value = Object.fromEntries(data.entries());

            console.log('form data', value);

            var redirectTo = $(event.target).attr('data-redirectTo');

            console.log('redirect', redirectTo);

            var isFormValid = event.target.checkValidity();

            event.target.classList.add('was-validated');

            if (isFormValid) {
                var formAction = form.action;

                $.ajax({
                    type: 'POST',
                    url: formAction,
                    data: value,
                    success: function (data, status, xhr) {
                        console.log('inquiry post', data);
                        Toastify({
                            text: "Submitted successfully!",
                            duration: 3000,
                            close: true,
                            gravity: "top", // `top` or `bottom`
                            position: "right", // `left`, `center` or `right`
                            stopOnFocus: true, // Prevents dismissing of toast on hover
                            style: {
                                background: "#6AB0F8",
                            },
                            onClick: function () {
                            } // Callback after click
                        }).showToast();

                        event.target.classList.remove('was-validated');

                        if (redirectTo) {
                            window.location.replace(redirectTo);
                        } else {
                            window.location.reload();
                        }

                        $('.formLoader').hide();
                    }, error: function (data) {
                        const response = data.responseJSON;

                        if (response.isFormError) {
                            var errors = response.modelState.value;
                            console.log("Error", response);

                            // Iterate through the errors and render them next to the appropriate form fields
                            for (var key in errors) {
                                if (errors.hasOwnProperty(key)) {
                                    var inputElement = $('input[name="' + key + '"]');

                                    if (errors[key].errors.length > 0) {
                                        errors[key].errors.forEach(function (error) {
                                            var errorElement = $('<div class="invalid-feedback" style="display: block;">' + error.errorMessage + '</div>');
                                            inputElement.after(errorElement);
                                        });
                                    }
                                }
                            }
                        }

                        Toastify({
                            text: response.message ? response.message : "Something went wrong. Please try again later.",
                            duration: 3000,
                            close: true,
                            gravity: "top", // `top` or `bottom`
                            position: "center", // `left`, `center` or `right`
                            stopOnFocus: true, // Prevents dismissing of toast on hover
                            style: {
                                background: "#D01818",
                            },
                            onClick: function () {
                            } // Callback after click
                        }).showToast();

                        $('.formLoader').hide();
                    }
                });
            }

            return false;
        }
    </script>
}