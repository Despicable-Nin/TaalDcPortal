@using TaalDc.Portal.DTO.Catalog;
@model TaalDc.Portal.ViewModels.Catalog.FloorCreate_ClientDto

@{
    List<Tower_ClientDto> towers = ViewBag.Towers;

    ViewBag.Title = "Edit Floor";
    Layout = "_Layout";
}


<div class="container-fluid">
    <h4 class="primary-color mb-3">
        <strong>
            Edit Floor
        </strong>
    </h4>

    <div>
        <form id="propertyForm" method="post" class="row mb-5 needs-validation" asp-action="CreateFloor" asp-controller="Properties">

            @if (!string.IsNullOrEmpty(Model.FloorPlanFilePath))
            {
                if (Model.FloorPlanFilePath.Contains("svg"))
                {
                    <div class="col-lg-8 mb-3" id="floor-plan">
                         <div class="formLoader">
                            <ul class="formLoading">
                                <li></li>
                                <li></li>
                                <li></li>
                            </ul>
                        </div>
                        <img class="img-fluid" src="@Model.FloorPlanFilePath" alt="Floor Plan" onload="SVGInject(this)" />
                    </div>
                }
                else
                {
                    <div class="col-lg-8 mb-3" id="floor-plan">
                        <img class="img-fluid" src="@Model.FloorPlanFilePath" alt="Floor Plan" />
                    </div>
                }
            }


            <div class="col-lg-4">
                <input type="hidden" asp-for="FloorId"></input>
                <div class="mb-3">
                    <label asp-for="TowerId" class="form-label">
                        <strong>Tower</strong>
                    </label>
                    <select asp-for="TowerId" class="form-control form-select" required>
                        @foreach (var tower in towers)
                        {
                            <option value="@tower.Id">
                                @tower.PropertyName - @tower.TowerName
                            </option>
                        }
                    </select>
                    <div class="invalid-feedback">
                        This is a required field.
                    </div>
                </div>

                <div class="mb-3">
                    <label asp-for="Name" class="form-label">
                        <strong>Name</strong>
                    </label>
                    <input asp-for="Name" class="form-control" required />
                    <div class="invalid-feedback">
                        This is a required field.
                    </div>
                </div>

                <div class="mb-3">
                    <label asp-for="Description" class="form-label">
                        <strong>Floor Description</strong>
                    </label>
                    <input asp-for="Description" class="form-control" required />
                    <div class="invalid-feedback">
                        This is a required field.
                    </div>
                </div>

                <div>
                    <label asp-for="FloorPlanFilePath" class="form-label">
                        <strong>Floor Plan File Path</strong>
                    </label>
                    <input asp-for="FloorPlanFilePath" class="form-control" hidden />
                </div>

                <div class="mb-3">
                    <input id="File" name="File" type="file" class="form-control" />
                </div>

                <div>
                    <input id="property-form-submit" class="btn btn-primary" type="submit" value="Save" />
                </div>
            </div>
            
        </form>
    </div>

</div>

<!-- Modal -->
<div class="modal fade" id="confirmationModal" tabindex="-1" aria-labelledby="confirmationModal" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="exampleModalLabel">Form Submission</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to submit this?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">No</button>
                <button onclick="onPropertyFormSubmit(this, '/Properties/EditFloor/@Model.FloorId')" type="button" class="btn btn-primary">Yes</button>
            </div>
        </div>
    </div>
</div>

@section HeaderScripts{
    <script src="~/js/common/svg-inject.js"></script>
    <script>
        var floorUnits;

        async function getFloorUnitStatus(){
            console.log('getting floor units');
            var uri = '@Url.Action("GetFloorUnitsStatus","Properties", new { id = Model.FloorId })';

            return new Promise((resolve, reject) => {
                $.ajax({
                    type:'GET',
                    url: uri,
                    success: function(data, status){
                       resolve(data);
                    },
                    error: function(data){

                    }
                })
            })
        }

        async function generateSVG(svg){
            var paths = svg.getElementsByTagName('path');

            var floorUnits = await getFloorUnitStatus();

            Array.from(paths).forEach((path) => {
                var unit = floorUnits.units.find(u => u.unit === path.id.toString());

                path.style.fill = unit.color;
            })

            $('.formLoader').hide();
        }

        SVGInject.setOptions({
            useCache: false, // no caching
            copyAttributes: false, // do not copy attributes from `<img>` to `<svg>`
            makeIdsUnique: false, // do not make ids used within the SVG unique
            afterLoad: function (svg, svgString) {
                $('.formLoader').show();
                 generateSVG(svg);                
            },
            beforeInject: function (img, svg) {
                // wrap SVG in a div element
            },
            afterInject: function (img, svg) {
               
            },
            onFail: function (img) {
            }
        });
    </script>
}


@section Scripts
{
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script src="~/js/catalog/Property.js"></script>
}