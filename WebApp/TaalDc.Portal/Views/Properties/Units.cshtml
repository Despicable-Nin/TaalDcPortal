@using TaalDc.Portal.DTO.Catalog;
@using TaalDc.Portal.ViewModels.Catalog
@model PaginationQueryResult<TaalDc.Portal.DTO.Catalog.Unit_ClientDto>

@{
    ViewBag.Title = "Units";
    Layout = "_Layout";


    List<UnitType_ClientDto> unitTypes = ViewBag.UnitTypes;

    var filter = Context.Request.Query["filter"].FirstOrDefault();
    var sortBy = Context.Request.Query["sortBy"].FirstOrDefault();
    var sortOrder = Context.Request.Query["sortOrder "].FirstOrDefault();
    var unitTypeId = Context.Request.Query["unitTypeId"].FirstOrDefault();
    var pageSize = Context.Request.Query["pageSize"].FirstOrDefault();

    var currentPageNo = Model.PageNumber;

    int pageSizeValue = 0;
    int numberOfPagesToDisplay = 10;

    Int32.TryParse(pageSize, out pageSizeValue);

    pageSizeValue = pageSizeValue > 0 ? pageSizeValue : 10;

    var totalPageGroups = Model.TotalPages / numberOfPagesToDisplay;

    var pageGroups = new List<int>();

    for (var i = 1; i <= totalPageGroups; i++)
    {
        pageGroups.Add(i * numberOfPagesToDisplay);
    }

    var nextPage = 0;
    var prevPage = 0;
}

<div class="container-fluid">
    <ul class="nav nav-tabs">
        <li class="nav-item">
            <a class="nav-link" aria-current="page" asp-controller="Properties" asp-action="Index">Properties</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" asp-controller="Properties" asp-action="Towers">Towers</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" asp-controller="Properties" asp-action="Floors">Floors</a>
        </li>
        <li class="nav-item">
            <a class="nav-link active" asp-controller="Properties" asp-action="Units">Units</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" asp-controller="Properties" asp-action="UnitTypes">Unit Types</a>
        </li>
    </ul>


    <div class="tab-content">
        <div class="action-section">
            <div class="action-btn text-end">
                <a asp-controller="Properties" asp-action="CreateUnit" asp-route-returnUrl="@Url.Action("Units", "Properties", new {
                                            pageNumber = Model.PageNumber
                })" class="btn btn-primary">New Unit</a>
            </div>

            <div class="action-search">
                <form id="unitSearchForm" class="mb-3">
                    <div class="me-3">
                        <label for="filter" class="form-label">
                            Unit No.
                        </label>
                        <input name="filter" value="@(!string.IsNullOrEmpty(filter) ? filter : "")" class="form-control" placeholder="Search..."/>
                    </div>
                    <div>
                        <label for="unitTypeId" class="form-label">Unit Type</label>
                        <select name="unitTypeId" class="form-control form-select" onchange="submitUnitSearchForm()">
                            <option value="">Show All</option>
                            @foreach(var unitType in unitTypes)
                            {
                                var selected = false;
                                @if (unitType.Id.ToString() == unitTypeId)
                                {
                                    selected = true;
                                }

                                <option value="@unitType.Id" selected="@selected">@unitType.Name</option>
                            }
                        </select>
                    </div>
                </form>

                <a target="_blank" class="btn btn-primary" href="@Url.Action("UnitsReport","Properties")?filter=@filter&unitTypeId=@unitTypeId">
                    <i class="fa-sharp fa-solid fa-file-excel"></i> Export
                </a>
            </div>
        </div>

        <div class="data-section">
            <div class="table-responsive w-100 mb-3">
                <table class="table table-striped" style="min-width: 1500px;">
                    <thead>
                    <tr>
                        <th>ID</th>
                        <th>Property</th>
                        <th>Unit Type</th>
                        <th>Floor No.</th>
                        <th>Tower No.</th>
                        <th>Total Area</th>
                        <th>Unit Area</th>
                        <th>Balcony Area</th>
                        <th>Unit No.</th>
                        <th>Selling Price</th>
                        <th>Status</th>
                        <th></th>
                    </tr>
                    </thead>
                    <tbody>
                    @foreach (var prop in Model.Data)
                    {
                        var propertyWords = prop.PropertyName.Split(' ');

                        var propertyInitials = "";

                        foreach (var word in propertyWords)
                        {
                            propertyInitials = propertyInitials + word[0];
                        }


                        <tr>
                            <td>@prop.Id</td>
                            <td>@(propertyInitials + " - " + prop.TowerName)</td>
                            <td>@prop.UnitType @prop.ScenicView</td>
                            <td>@prop.FloorName</td>
                            <td>@prop.Tower</td>
                            <td>@prop.TotalArea.ToString("#0.#0")</td>
                            <td>@prop.FloorArea.ToString("#0.#0")</td>
                            <td>@prop.BalconyArea.ToString("#0.#0")</td>
                            <td>@prop.Identifier</td>
                            <td>@prop.Price.ToString("#,##0.00")</td>
                            <td>@prop.UnitStatus</td>
                            <td>
                                @if (prop.UnitStatusId == 2 || prop.UnitStatusId == 3)
                                {

                                }
                                else
                                {
                                        <a class="action-edit" asp-controller="Properties" asp-action="EditUnit" asp-route-id="@prop.Id" 
                                        asp-route-returnUrl="@Url.Action("Units", "Properties", new {
                                            pageNumber = Model.PageNumber,
                                            filter = filter,
                                            unitTypeId = unitTypeId
                                        })">Edit</a>
                                    <a class="action-delete" href="#">Delete</a>
                                }
                                
                            </td>
                        </tr>
                    }
                    </tbody>
                </table>
            </div>
            <div>
                <ul class="pagination">

                    @{
                        var pageGroupIndex = pageGroups.Where(i => currentPageNo <= i).FirstOrDefault();
                        var lastPageIndex = pageGroups.OrderByDescending(i => i).FirstOrDefault();
                        var pageGroup = pageGroups.Count() > 0 && pageGroupIndex > 0 ? pageGroupIndex : Model.TotalPages;
                        var pageGroupMinPage = Model.TotalPages <= 5 ? 0 : pageGroupIndex > 0 ? pageGroup - numberOfPagesToDisplay : lastPageIndex;

                        //5 -> 0
                        //10 -> 5

                        nextPage = currentPageNo < Model.TotalPages ? currentPageNo + 1 : 0;
                        prevPage = currentPageNo > 1 ? currentPageNo - 1 : 0;
                    }

                    <li class="page-item @(prevPage == 0 ? "disabled" : "")">
                        <a class="page-link alink noselect" href="?pageNumber=@(prevPage)&filter=@(filter)&unitTypeId=@(unitTypeId)&pageSize=@pageSizeValue">Prev</a>
                    </li>

                    @if (pageGroup == 0 || pageGroup == pageGroupMinPage)
                    {
                        <li class="page-item">
                            <a href="?pageNumber=@(Model.PageNumber)&filter=@(filter)&unitTypeId=@(unitTypeId)&pageSize=@pageSizeValue" class="noselect page-link alink active">@Model.PageNumber</a>
                        </li>
                    }

                    @for (var i = pageGroupMinPage; i < pageGroup; i++)
                    {
                        var active = i + 1 == Model.PageNumber;
                        var pageNo = i + 1;
                        <li class="page-item">
                            <a href="?pageNumber=@(pageNo)&filter=@(filter)&unitTypeId=@(unitTypeId)&pageSize=@pageSizeValue" class="noselect page-link alink @(active ? "active" : "")">@(pageNo)</a>
                        </li>
                    }

                    <li class="page-item @(nextPage == 0 ? "disabled" : "")">
                        <a class="page-link alink noselect" href="?pageNumber=@(nextPage)&filter=@(filter)&unitTypeId=@(unitTypeId)&pageSize=@pageSizeValue">Next</a>
                    </li>

                </ul>

                <label>Show</label>
                <select id="pageSizeValue" onChange="onPageLimitChange()">
                    <option value="10" selected="@(pageSizeValue == 10)">10</option>
                    <option value="15" selected="@(pageSizeValue == 15)">15</option>
                    <option value="20" selected="@(pageSizeValue == 20)">20</option>
                    <option value="50" selected="@(pageSizeValue == 50)">50</option>
                </select>
            </div>

        </div>
    </div>
</div>

@section Scripts{
    <script>
        function submitUnitSearchForm(){
            var form = document.getElementById("unitSearchForm");

            form.submit();
        }

        function onPageLimitChange(){
            var pageLimitValue = document.getElementById("pageSizeValue");
            
            insertParam("pageSize", pageLimitValue.options[pageLimitValue.selectedIndex].value);

        }

        function insertParam(key, value) {
            key = encodeURIComponent(key);
            value = encodeURIComponent(value);

            // kvp looks like ['key1=value1', 'key2=value2', ...]
            var kvp = document.location.search.substr(1).split('&');
            let i=0;

            for(; i<kvp.length; i++){
                if (kvp[i].startsWith(key + '=')) {
                    let pair = kvp[i].split('=');
                    pair[1] = value;
                    kvp[i] = pair.join('=');
                    break;
                }
            }

            if(i >= kvp.length){
                kvp[kvp.length] = [key,value].join('=');
            }

            // can return this or...
            let params = kvp.join('&');

            // reload page with new params
            document.location.search = params;
        }
    </script>
}