@using SeedWork;
@using TaalDc.Portal.DTO.Catalog.Floors;
@inject IAmCurrentUser CurrentUser

@{
    ViewData["Title"] = "Floors Realtime Status";

    var activeFloors = ViewBag.ActiveFloors as IEnumerable<ActiveFloor_ClientDto>;

    var activeFloorId = Context.Request.Query["ActiveFloor"].FirstOrDefault();

    activeFloorId = activeFloorId == null ? activeFloors.First().Id.ToString() : activeFloorId;

    var activeFloor = activeFloors.Any() ? activeFloors.LastOrDefault(i => i.Id.ToString() == activeFloorId): new ActiveFloor_ClientDto();

    if(activeFloor != null){
        ViewData["Title"] = activeFloor.FloorDescription + " - " + ViewBag.Title;
    }
}

<div class="container-fluid">
      <ul class="nav nav-pills">
        <li class="nav-item">
            <a class="nav-link " aria-current="page" asp-controller="Home" asp-action="Index">Units</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" aria-current="page" asp-controller="Home" asp-action="Parking">Parking</a>
        </li>
        <li class="nav-item">
            <a class="nav-link active" aria-current="page" asp-controller="Home" asp-action="FloorPlans">Floor Plans</a>
        </li>
    </ul>

    <div class="mt-3 mb-3">
        <div class="card" style="width: 100%">
            <div class="card-body">
                
                <div class="floor-area-wrapper">

                    <div class="floor-selection-area">
                        <h4 class="primary-color ">
                            <strong>
                                Select a floor
                            </strong>
                        </h4>

                        <ul class="list-group">
                            @foreach(var floor in activeFloors)
                            {
                                bool isActive = activeFloorId == floor.Id.ToString() ? true : false;

                                <li class="list-group-item @(isActive? "active": "")" aria-current="true">
                                    <a href="@Url.Action("FloorPlans", "Home", new { ActiveFloor = floor.Id })">@floor.FloorDescription</a>
                                </li>
                            }
                            
                        @*  <li class="list-group-item">5th Floor</li>
                          <li class="list-group-item">6th Floor</li>
                          <li class="list-group-item">7th Floor</li>
                          <li class="list-group-item">8th Floor</li>
                          <li class="list-group-item">9th Floor</li>
                          <li class="list-group-item">10th Floor</li>
                          <li class="list-group-item">11th Floor</li>
                          <li class="list-group-item">12th Floor</li>*@
                        </ul>
                    </div>
                    <div class="floor-viewing-area">
                        @if(activeFloor != null && !string.IsNullOrEmpty(activeFloor.FloorPlanFilePath)){
                            <div class="button-area">
                                @if(CurrentUser.IsAdmin()){
                                <a target="_blank" href="@Url.Action("EditFloor", "Properties", new { Id = activeFloor.Id })" class="btn btn-secondary">
                                    Edit
                                </a>
                                }

                                <a target="_blank" href="@Url.Action("FloorPlan", "Properties", new { Id = activeFloor.Id } )" class="btn btn-primary">
                                    Print
                                </a>
                            </div>

                           

                            @if(activeFloor != null && activeFloor.FloorPlanFilePath.Contains("svg"))
                            {
                                <div id="legends">
                                    <h5><strong>LEGEND:</strong></h5>
                                    <ul>
                                        <li>
                                            <div class="leg available"></div>AVAILABLE
                                        </li>
                                        <li><div class="leg reserved"></div>RESERVED</li>
                                        <li><div class="leg sold"></div>SOLD</li>
                                        <li><div class="leg blocked"></div>BLOCKED</li>
                                    </ul>
                                </div>

                                <div id="floor-plan">
                                        <div class="formLoader">
                                        <ul class="formLoading">
                                            <li></li>
                                            <li></li>
                                            <li></li>
                                        </ul>
                                    </div>
                                    <img class="img-fluid" src="@activeFloor.FloorPlanFilePath" alt="Floor Plan" onload="SVGInject(this)" />
                                </div>
                            }
                            else
                            {
                                <div id="floor-plan">
                                    <img class="img-fluid" src="@activeFloor.FloorPlanFilePath" alt="Floor Plan" />
                                </div>
                            }
                        }
                        else
                        {
                            <p>
                                No floor plan found.
                            </p>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


@section HeaderScripts{
     <script src="~/js/common/svg-inject.js"></script>

     @if(activeFloor != null){
        <script>
            var floorUnits;

            async function getFloorUnitStatus() {
                console.log('getting floor units');
                var uri = '@Url.Action("GetFloorUnitsStatus","Properties", new { id = activeFloor.Id })';

                return new Promise((resolve, reject) => {
                    $.ajax({
                        type: 'GET',
                        url: uri,
                        success: function (data, status) {
                            resolve(data);
                        },
                        error: function (data) {

                        }
                    })
                })
            }

            async function generateSVG(svg) {
                var paths = svg.getElementsByTagName('path');

                var floorUnits = await getFloorUnitStatus();

                Array.from(paths).forEach((path) => {
                    var unit = floorUnits.units.find(u => u.unit === path.id.toString());


                    if(unit){
                        path.style.fillOpacity = "0.50";
                        path.style.fill = unit.color;
                    }
                })

                $('.formLoader').hide();
            }

            SVGInject.setOptions({
                useCache: false, // no caching
                copyAttributes: false, // do not copy attributes from `<img>` to `<svg>`
                makeIdsUnique: false, // do not make ids used within the SVG unique
                afterLoad: function (svg, svgString) {
                    $('.formLoader').show();
                    generateSVG(svg);
                },
                beforeInject: function (img, svg) {
                    // wrap SVG in a div element
                },
                afterInject: function (img, svg) {

                },
                onFail: function (img) {
                }
            });
        </script>
    }
}


@section Scripts
{
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}